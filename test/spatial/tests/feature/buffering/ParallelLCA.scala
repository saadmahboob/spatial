package spatial.tests.feature.buffering

import spatial.dsl._

/* Test case is ripped from DigitRecognition, where label_list_tmp
   had its accesses LCA point to a parallel that was generated by the unrolling of 
   an outer loop, but memory analysis correctly determined the bodies are in lockstep
   and the buffer depth is computed from only the distance between a set of accesses
   in one of the unrolled bodies, not all of them
   */
@spatial class ParallelLCA extends SpatialTest {
  override def runtimeArgs: Args = "2"
  def main(args: Array[String]): Void = {

    val getcol = args(0).to[Int]
    assert(getcol < 8)
    val arg = ArgIn[Int]
    setArg(arg, getcol)
    //val argout = ArgOut[Int]
    val dram = DRAM[Int](8)
    Accel{
      val mem = SRAM[Int](8,8)
      val mem2 = SRAM[Int](8)
      Foreach(8 by 1 par 3){i => 
        Foreach(8 by 1) {_ => 
          val col = arg.value
          Foreach(8 by 1){j =>
            mem(i,j) = i+j
          }
          mem2(i) = mem(i,col)
        }
      }
      dram store mem2
    }

    val got = getMem(dram)
    val gold = Array.tabulate(8){i => i + getcol}
    printArray(got, "Got")
    printArray(gold, "Gold")
    assert(got == gold)
    println(r"Pass: ${got == gold}")
  }
}

